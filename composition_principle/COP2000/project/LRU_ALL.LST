            ; 初始化部分，清空必要寄存器和内存
00 7C00     MOV A, #00H
02 80       MOV R0, A
03 81       MOV R1, A
04 82       MOV R2, A
05 83       MOV R3, A
            
06 88EF     MOV 0EFH, A
08 88EE     MOV 0EEH, A
0A 88EB     MOV 0EBH, A
0C 88EA     MOV 0EAH, A
0E 88DF     MOV 0DFH, A
10 88DE     MOV 0DEH, A
            
            MAIN:
12 8CF0         MOV R0, #0F0H       ; 设置原地址指针为0F0H
            
14 7C04         MOV A, #04H         ; 设置循环次数
16 88DD         MOV 0DDH, A         ; 用于跟踪循环计数
            
18 8CF0         MOV R0, #0F0H
1A 8FE3         MOV R3, #0E3H
            
1C BC20         CALL PAGES           ; 调用页面置换逻辑
            
1E ACCC         JMP OVER             ; 完成后结束程序
            
            PAGES:
20 8CF4         MOV R0, #0F4H       ; 初始化原地址R0指向0F4H
22 8E0C         MOV R2, #12         ; 设置循环次数为12次
            
            PAGE_LOOP:
24 74           MOV A, @R0          ; 从原地址读取数据
25 BC3A         CALL CHECK_EXISTENCE ; 检查是否命中
            
27 BC72         CALL COPY            ; 调用COPY逻辑，复制页面数据到备份区域
29 BC58         CALL SHIFT_PAGE      ; 调用页面后移逻辑
            
                ; 检查是否命中并更新计数
2B BC8F         CALL COMPARE_PAGES
            
            NEXT_ADDRESS:
2D 70           MOV A, R0
2E 1C01         ADD A, #01          ; R0指针地址加1
30 80           MOV R0, A
31 72           MOV A, R2
32 3C01         SUB A, #01          ; 循环计数器减1
34 82           MOV R2, A
35 A4CC         JZ OVER             ; 若完成12次循环则结束
            
37 AC24         JMP PAGE_LOOP        ; 否则继续循环
            
39 CC           RET
            
            CHECK_EXISTENCE:
3A 8FE0         MOV R3, #0E0H       ; 初始化检查起点为0E0H
3C 7C04         MOV A, #4           ; 设置检查范围为4个地址
3E 88EB         MOV 0EBH, A
            
            CHECK_LOOP:
40 77           MOV A, @R3          ; 读取页面数据
41 34           SUB A, @R0          ; 比较数据是否相等
42 A452         JZ EXIST            ; 如果命中，则跳转到EXIST
            
44 73           MOV A, R3
45 1C01         ADD A, #01H          ; 移动到下一个地址
47 83           MOV R3, A
48 78EB         MOV A, 0EBH
4A 3C01         SUB A, #01           ; 检查剩余检查次数
4C 88EB         MOV 0EBH, A
4E A455         JZ MISS              ; 若未命中，跳转MISS
50 AC40         JMP CHECK_LOOP       ; 否则继续检查
            
            EXIST:
52 BCC5         CALL HIT             ; 调用命中更新逻辑
54 CC           RET
            
            MISS:
55 BCBE         CALL NHIT            ; 调用未命中更新逻辑
57 CC           RET
            
            SHIFT_PAGE:
58 8FE3         MOV R3, #0E3H       ; 初始化后移起点为0E3H
5A 7C04         MOV A, #4           ; 设置后移次数
5C 88EA         MOV 0EAH, A
            
            SHIFT_LOOP:
5E 77           MOV A, @R3          ; 从当前地址读取数据
5F 81           MOV R1, A           ; 保存数据至R1
60 73           MOV A, R3
61 3C01         SUB A, #01H         ; 获取前一地址
63 87           MOV @R3, A         ; 将数据写入前一地址
64 3C01         SUB A, #01          ; 更新地址寄存器
66 83           MOV R3, A
67 78EA         MOV A, 0EAH
69 3C01         SUB A, #01          ; 后移次数递减
6B 88EA         MOV 0EAH, A
6D A471         JZ END_SHIFT         ; 若完成后移，退出循环
6F AC5E         JMP SHIFT_LOOP       ; 否则继续后移
            
            END_SHIFT:
71 CC           RET
            
            COPY:
72 8FE0         MOV R3, #0E0H       ; 源地址起点为0E0H
74 8DD5         MOV R1, #0D5H       ; 备份地址起点为0D5H
76 7C04         MOV A, #4           ; 设置需要复制的页面数
78 88EB         MOV 0EBH, A
            
            COPY_LOOP:
7A 77           MOV A, @R3          ; 从源地址读取数据
7B 85           MOV @R1, A          ; 将数据写入备份地址
7C 73           MOV A, R3
7D 1C01         ADD A, #01H         ; 源地址递增
7F 83           MOV R3, A
80 71           MOV A, R1
81 1C01         ADD A, #01H         ; 备份地址递增
83 81           MOV R1, A
84 78EB         MOV A, 0EBH
86 3C01         SUB A, #01          ; 剩余需要复制的页面数递减
88 88EB         MOV 0EBH, A
8A A48E         JZ END_COPY          ; 若完成复制，退出循环
8C AC7A         JMP COPY_LOOP        ; 否则继续复制
            
            END_COPY:
8E CC           RET
            
            COMPARE_PAGES:
8F 8FE0         MOV R3, #0E0H       ; 地址起点为0E0H
91 8DD0         MOV R1, #0D0H       ; 对比地址起点为0D0H
93 7C04         MOV A, #4           ; 设置对比次数
95 88EB         MOV 0EBH, A
            
            COMPARE_LOOP:
97 77           MOV A, @R3          ; 读取页面数据
98 35           SUB A, @R1          ; 比较数据
99 A49D         JZ INCREMENT_HIT     ; 若相等，增加命中计数
9B ACA5         JMP INCREMENT_MISS   ; 若不相等，增加未命中计数
            
            INCREMENT_HIT:
9D 78EF         MOV A, 0EFH         ; 读取命中计数
9F 1C01         ADD A, #01H         ; 命中计数加1
A1 88EF         MOV 0EFH, A
A3 ACAB         JMP NEXT_COMPARE
            
            INCREMENT_MISS:
A5 78EE         MOV A, 0EEH         ; 读取未命中计数
A7 1C01         ADD A, #01H         ; 未命中计数加1
A9 88EE         MOV 0EEH, A
            
            NEXT_COMPARE:
AB 73           MOV A, R3
AC 1C01         ADD A, #01H         ; 页面地址递增
AE 83           MOV R3, A
AF 71           MOV A, R1
B0 1C01         ADD A, #01H         ; 对比地址递增
B2 81           MOV R1, A
B3 78EB         MOV A, 0EBH
B5 3C01         SUB A, #01          ; 对比次数递减
B7 88EB         MOV 0EBH, A
B9 A4BD         JZ END_COMPARE       ; 若完成对比，退出循环
BB AC97         JMP COMPARE_LOOP     ; 否则继续对比
            
            END_COMPARE:
BD CC           RET
            
            NHIT:
BE 78EE         MOV A, 0EEH         ; 获取未命中计数
C0 1C01         ADD A, #01H         ; 增加1
C2 88EE         MOV 0EEH, A         ; 保存回内存
C4 CC           RET
            
            HIT:
C5 78EF         MOV A, 0EFH         ; 获取命中计数
C7 1C01         ADD A, #01H         ; 增加1
C9 88EF         MOV 0EFH, A         ; 保存回内存
CB CC           RET
            
            OVER:
CC ACCC         JMP OVER            ; 结束程序循环
            
            
