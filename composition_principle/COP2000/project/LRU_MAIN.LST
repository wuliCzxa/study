            ; 初始化寄存器和相关变量
00 7C00     MOV A, #00H             ; 初始化A寄存器为0
02 80       MOV R0, A               ; 清空R0寄存器
03 81       MOV R1, A               ; 清空R1寄存器
04 82       MOV R2, A               ; 清空R2寄存器
05 83       MOV R3, A               ; 清空R3寄存器
            
            ;MOV 0EEH, A             ; 初始化未命中计数器
06 88EB     MOV 0EBH, A             ; 初始化循环计数寄存器
08 88EA     MOV 0EAH, A             ; 初始化后移循环计数器
            
            ;MOV A, #04H
            ;MOV 0EFH, A             ; 初始化命中计数器
            ; 主程序入口
            MAIN:
0A 8CF4         MOV R0, #0F4H       ; 设置R0指针指向0F0H作为初始地址
0C 7C0C         MOV A, #12         ; 设定处理的地址范围长度（16次循环）
0E 88DD         MOV 0DDH, A         ; 设置循环计数器的值
            
            PAGE_LOOP:
10 74           MOV A, @R0          ; 从当前地址读取数据
11 BC25         CALL COPY           ; 调用COPY程序，将0E0H~0E3H内容复制到0D5H~0D8H
13 BC3E         CALL SHIFT_PAGE     ; 调用后移程序，将页面后移一位
15 BC69         CALL COMPARE        ; 比较0E0H~0E3H和0D5H~0D8H内容，更新命中和未命中计数
            
            NEXT_PAGE:
17 70           MOV A, R0           ; 读取R0
18 1C01         ADD A, #01H         ; R0增加1，指向下一地址
1A 80           MOV R0, A           ; 更新R0
            
1B 78DD         MOV A, 0DDH         ; 读取循环计数器
1D 3C01         SUB A, #01H         ; 减1，判断是否结束
1F 88DD         MOV 0DDH, A         ; 保存更新后的计数器
21 A4BB         JZ END_LOOP         ; 如果计数为0，跳转结束程序
23 AC10         JMP PAGE_LOOP       ; 否则，跳转到PAGE_LOOP继续循环
            
            ; 子程序：COPY
            ; 功能：将0E0H~0E3H数据复制到0D5H~0D8H
            COPY:
25 8FE0         MOV R3, #0E0H       ; 设置复制起始地址为0E0H
27 8E04         MOV R2, #04H        ; 设置复制长度为4
29 8DD5         MOV R1, #0D5H       ; 设置目标地址为0D5H
            
            COPY_LOOP:
2B 77           MOV A, @R3          ; 从0E0H~0E3H读取数据
2C 85           MOV @R1, A          ; 将数据复制到0D5H~0D8H
2D 73           MOV A, R3           ; 当前地址指针后移
2E 1C01         ADD A, #01H
30 83           MOV R3, A           ; 更新当前地址
31 71           MOV A, R1           ; 目标地址指针后移
32 1C01         ADD A, #01H
34 81           MOV R1, A           ; 更新目标地址
35 72           MOV A, R2           ; 剩余长度减1
36 3C01         SUB A, #01H
38 82           MOV R2, A
39 A43D         JZ COPY_END         ; 如果剩余长度为0，结束复制
3B AC2B         JMP COPY_LOOP       ; 否则继续复制
            
            COPY_END:
3D CC           RET                 ; 返回主程序
            
            ; 子程序：SHIFT_PAGE
            ; 功能：将0E0H~0E3H的页面后移一位
            SHIFT_PAGE:
3E 8FE3         MOV R3, #0E3H       ; 设置后移操作的起点为0E3H
40 7C04         MOV A, #04H         ; 后移页面的数量为4
42 88EA         MOV 0EAH, A         ; 存储后移次数
44 74           MOV A, @R0
45 88D1         MOV 0D1H, A
47 BC49         CALL SHIFT_LOOP
            SHIFT_LOOP:
49 77           MOV A, @R3          ; 从当前地址读取数据
4A 81           MOV R1, A
4B 73           MOV A, R3           ; 当前地址后移
4C 1C01         ADD A, #01H
4E 83           MOV R3, A           ; 写入下一地址
4F 71           MOV A, R1
50 87           MOV @R3, A
            
51 73           MOV A, R3           ; 前移到上一地址
52 3C02         SUB A, #02H
54 83           MOV R3, A
55 78EA         MOV A, 0EAH         ; 更新后移次数
57 3C01         SUB A, #01H
59 88EA         MOV 0EAH, A
5B A45F         JZ SHIFT_END        ; 后移次数完成，退出
5D AC49         JMP SHIFT_LOOP      ; 否则继续后移
            
            SHIFT_END:
5F 78D1         MOV A, 0D1H
61 88E0         MOV 0E0H, A         ; 将当前原地址数据存入0E0H
63 7C00         MOV A, #00H      ; 清空0E4H数据
65 88E4         MOV 0E4H, A
67 AC69         JMP COMPARE                 ; 返回主程序
            
            ; 子程序：COMPARE
            ; 功能：比较0E0H~0E3H和0D5H~0D8H的数据，更新命中/未命中计数
            COMPARE:
69 8FE0         MOV R3, #0E0H       ; 设置比较起始地址为0E0H
6B 8E04         MOV R2, #04H        ; 设置比较长度为4
6D 7C00         MOV A, #00H        ; 设置命中标志，初始为0，表示未命中
6F 88EB         MOV 0EBH, A
            
            COMPARE_E0:
71 77           MOV A, @R3          ; 从0E0H读取数据
72 8DD5         MOV R1, #0D5H       ; 设置目标比较地址为0D5H
74 7C04         MOV A, #04H        ; 设置比较长度为4
76 88EC         MOV 0ECH, A
            
            COMPARE_E0_LOOP:
78 75           MOV A, @R1          ; 从0D5H~0D8H中读取数据
79 37           SUB A, @R3          ; 比较0E0H和0D5H~0D8H中的数据
7A A48A         JZ MATCH             ; 如果找到匹配项，跳转到MATCH
            
7C 71           MOV A, R1           ; 目标地址后移
7D 1C01         ADD A, #01H
7F 81           MOV R1, A
80 78EC         MOV A, 0ECH           ; 剩余比较长度减1
82 3C01         SUB A, #01H
84 88EC         MOV 0ECH, A
86 A490         JZ COMPARE_END_E0
88 AC78         JMP COMPARE_E0_LOOP  ; 如果未比较完，继续
            
            MATCH:
8A 7CFF         MOV A, #0FFH        ; 设置命中标志为1，表示已经找到匹配项
8C 88EB         MOV 0EBH, A
8E AC90         JMP COMPARE_END_E0  ; 匹配成功，结束比较
            
            COMPARE_END_E0:
90 78EB         MOV A, 0EBH           ; 读取命中标志
92 5C01         AND A, #01H
94 A49A         JZ NO_MATCH         ; 如果未命中，调用未命中程序
96 BCA9         CALL HIT             ; 如果命中，调用命中次数增加程序
98 AC9C         JMP NEXT_COMPARE    ; 进入下一次比较
            
            NO_MATCH:
9A BCB2         CALL NULL            ; 如果未命中，调用未命中次数增加程序
            
            NEXT_COMPARE:
9C 73           MOV A, R3           ; 比较地址后移
9D 1C01         ADD A, #01H
9F 83           MOV R3, A
A0 72           MOV A, R2           ; 剩余比较长度减1
A1 3C01         SUB A, #01H
A3 82           MOV R2, A
A4 A4A8         JZ COMPARE_END      ; 如果完成，退出
A6 AC78         JMP COMPARE_E0_LOOP    ; 否则继续比较
            
            COMPARE_END:
A8 CC           RET                 ; 返回主程序
            
            ; 子程序：命中次数增加程序
            HIT:
A9 78EF         MOV A, 0EFH         ; 命中计数器加1
AB 1C01         ADD A, #01H
AD 88EF         MOV 0EFH, A
AF AC17         JMP NEXT_PAGE
B1 CC           RET                 ; 返回主程序
            
            ; 子程序：未命中次数增加程序
            NULL:
B2 78EE         MOV A, 0EEH         ; 未命中计数器加1
B4 1C01         ADD A, #01H
B6 88EE         MOV 0EEH, A
B8 AC17         JMP NEXT_PAGE
BA CC           RET                 ; 返回主程序
            
            END_LOOP:
BB ACBB         JMP END_LOOP        ; 程序结束，进入死循环
            
